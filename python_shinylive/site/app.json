[{"name": "app.py", "content": "# Dependencies\nfrom shiny import App, render, ui\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\nimport numpy as np\nfrom scipy.interpolate import interp1d\nfrom scipy.integrate import odeint\n\n\n# Functions\ndef f( R_0, recov, N,I, VE,NIlimit1,cov,vac_start, time_end,model_type):\n        beta=R_0/recov\n        S, I, R, total_inf, total_vac=N-I-cov*N,  I, cov*N, I,cov*N\n        initial_values= [S, I, R, total_inf, total_vac]\n        sigma, ve, p, b,NIlimit, modely=1/recov, VE, cov, 0,0, model_type\n        #parameters=[beta, sigma, ve, p, b,vac_start, NIlimit, modely]\n        time1=range (1, time_end+1)\n        def vm_B2_hit (  state,time,N, beta, sigma, ve, p, b,vac_start, NIlimit, modely):\n                #S, I, R Total_inf, Total_va= state\n                F_B = beta*(state[1]/N)\n                if (modely==1):\n                    F_B = beta*(state[1]/N)*((N-state[2])/N)\n                \n                if (time>=vac_start):\n                    rate=p*ve*(1-NIlimit)\n                else:\n                    rate=0\n                \n                #dS = b*(1-p*ve)*N - F_B*S - b*S\n                dS = - F_B*state[0] - min(state[0],N*rate)\n                #dI = F_B*S - sigma*I - b*I\n                dI = F_B*state[0] - sigma*state[1]\n                #dR = sigma*I -b*R + b*p*ve*N\n                dR = sigma*state[1] + min(state[0],N*rate)\n                \n                dTotal_inf = F_B*state[0]\n                dTotal_vac = N*p # not used\n                \n                return dS,dI,dR,dTotal_inf,dTotal_vac\n         #vm_b2 function\n        def vm_B2 ( state,time,N, beta, sigma, ve, p, b,vac_start, NIlimit, modely, hit):\n                 #S, I, R Total_inf, Total_va= state\n                 F_B = beta*(state[1]/N)\n                 if (modely==1):\n                   F_B = beta*(state[1]/N)*((N-state[2])/N)\n                 \n                 if (time>=vac_start and time<=hit):\n                    ve=ve*(1-NIlimit)\n                    cov=p\n                 else:\n                    ve=0\n                    cov=0\n                 rate=p*ve\n \n                 #dS = b*(1-p*ve)*N - F_B*S - b*S\n                 dS = - F_B*state[0] - min(state[0],N*rate)\n                 #dI = F_B*S - sigma*I - b*I\n                 dI = F_B*state[0] - sigma*state[1]\n                 #dR = sigma*I -b*R + b*p*ve*N\n                 dR = sigma*state[1] + min(state[0],N*rate)\n                 \n                 dTotal_inf = F_B*state[0]\n                 dTotal_vac = min(state[0],N*cov) \n                 \n                 return dS,dI,dR,dTotal_inf,dTotal_vac\n             \n        if(model_type==1):\n                    a='Model B - Law paper'\n        else:\n                a='Conventional Sir'\n        data_table2=[\n\n            ['Population', \"{:,}\".format(N)],\n            ['Start I', str(I)],\n            ['Transmission rate', str(round(beta, 1))],\n            ['Recovery', str(recov)+' days' ], \n            ['Daily coverage', str(round(cov*100, 1))+' %' ],\n            ['Vaccine efficiency' , str(VE*100)+' %' ],\n            ['NI limit', str(NIlimit1*100)+' %' ], \n            ['Vaccination Start', str(vac_start)+' days'], \n            ['Model duration', str(time_end)+' days'],\n            ['Model type', a]\n\n        ]\n        #colors used for the table\n        colors2 = [[ \"cyan\", \"cyan\"], [\"yellow\", \"yellow\"],\n        [ \"cyan\", \"cyan\"],[ \"yellow\", \"yellow\"], [ \"cyan\", \"cyan\"], [\"yellow\", \"yellow\"],\n        [ \"cyan\", \"cyan\"],[ \"yellow\", \"yellow\"], [ \"cyan\", \"cyan\"],[ \"yellow\", \"yellow\"]]\n             \n        vm_model_B_hit=odeint(vm_B2_hit,  initial_values, time1, args=(N, beta, sigma, ve, p, b,vac_start, NIlimit, modely))\n        _S, _I, _R, _Total_inf, _Total_va=  vm_model_B_hit.T\n        df_B_hit=pd.DataFrame({\n         'susceptible': _S,\n         'infected': _I,\n         'recovered': _R,\n         'tot_infected':_Total_inf,\n         'tot_vacinated':_Total_va,\n         'day': time1  })\n        df_B_hit= df_B_hit*100/N\n        df_B_hit['day']= df_B_hit['day']*N/100\n        interpolate_y=interp1d(  df_B_hit['recovered'],  df_B_hit['day'], fill_value=\"extrapolate\")\n        y_hit=100*(1/ve)*(1-1/R_0)\n        hday=interpolate_y(y_hit)\n\n         \n        if vac_start<hday:\n               \n                  VM_model_B=odeint(vm_B2, initial_values, time1, args=(N, beta, sigma, ve, p, b,vac_start, NIlimit, modely,hday))\n                  #plot output Classical Sir Model\n                  S_, I_, R_, Total_inf_, Total_va_= VM_model_B.T\n                  df_B=pd.DataFrame({\n                  'susceptible': S_,\n                  'infected': I_,\n                  'recovered': R_,\n                  'tot_infected':Total_inf_,\n                  'tot_vaccinated':Total_va_,\n                  'day': time1  })\n\n                  df_B=100*df_B/N\n\n                  df_B['day']=df_B['day']*N/100\n\n                  \n                  #cR0=str(recov*beta)\n                  L=dict()\n                  if (hday<=10000):\n                      L['hi_day']=math.ceil(hday)\n                  else:\n                      L['hi_day']=\"-\"\n                     #accessing\n                  a1=list(df_B['tot_infected'])\n                  L['tot_inf_n']=(round(a1[len(a1)-1]*N/100))\n                  L['tot_inf_p']=str(round(a1[len(a1)-1], 1))\n                  a3=list(df_B['tot_vaccinated'])\n                  L['tot_treats_n']=(round(a3[len(a3)-1]*N/100))\n                  L['tot_treats_p']=str(round(a3[len(a3)-1], 1))\n                  \n                  #NI limit from user input\n                  NIlimit=NIlimit1\n\n                  VM_model_B_NI=odeint(vm_B2_hit,initial_values, time1, args=(N, beta, sigma, ve, p, b,vac_start,   NIlimit, modely))\n                  S1, I1, R1, Total_inf1, Total_va1=  VM_model_B_NI.T\n\n                  VM_model_B_NI=pd.DataFrame({\n                     'susceptible': S1,\n                     'infected': I1,\n                     'recovered': R1,\n                     'tot_infected':Total_inf1,\n                     'tot_vacinated':Total_va1,\n                     'day': time1  })\n                  VM_model_B_NI=VM_model_B_NI*100/N\n                  VM_model_B_NI['day']=VM_model_B_NI['day']*N/100\n\n              \n                  interpolate_y=interp1d( VM_model_B_NI['recovered'], VM_model_B_NI['day'], fill_value=\"extrapolate\")\n                  y_ni=100*(1/(ve-NIlimit))*(1-1/R_0)\n                  hday_ni=interpolate_y(y_ni)\n\n\n                  VM_model_B_NI=odeint(vm_B2, initial_values, time1, args=(N, beta, sigma, ve, p, b,vac_start, NIlimit, modely,hday_ni))\n                  #plot output Classical Sir Model\n                  S2, I2, R2, Total_inf2, Total_va2= VM_model_B_NI.T\n                  df_B_NI=pd.DataFrame({\n                  'susceptible': S2,\n                  'infected': I2,\n                  'recovered': R2,\n                  'tot_infected':Total_inf2,\n                  'tot_vaccinated':Total_va2,\n                  'day': time1  })\n\n                  df_B_NI=100* df_B_NI/N\n\n                  df_B_NI['day']= df_B_NI['day']*N/100\n\n                  L_ni=dict()\n                  if (hday_ni<=10000):\n                      L_ni['hi_day']=math.ceil(hday_ni)\n                  else:\n                      L_ni['hi_day']=\"-\"\n                  #accessing\n                  b1=list(df_B_NI['tot_infected'])\n                  L_ni['tot_inf_n']=(round(b1[len(b1)-1]*N/100))\n                  L_ni['tot_inf_p']=str(round(b1[len(b1)-1], 1))\n                  b2=list(df_B_NI['tot_vaccinated'])\n                  L_ni['tot_treats_n']=(round(b2[len(b2)-1]*N/100))\n                  L_ni['tot_treats_p']=str(round(b2[len(b2)-1], 1))\n\n                  #data and colors for the comparision table\n\n                  #colors used for the comparison table\n                  colors1= [[ \"azure\", \"azure\", 'azure'], [\"mintcream\", \"mintcream\",'mintcream'],\n                    [ \"cyan\", \"cyan\", \"cyan\"],[ \"greenyellow\", \"greenyellow\", \"greenyellow\"], [ \"mintcream\", \"mintcream\",'mintcream'], [\"greenyellow\", \"greenyellow\", \"greenyellow\"]]\n                  \n                  #data\n                  data_table1=[\n\n                        ['      ', \"Actual VE\", \"At NI limit\"],\n                        ['HI day', str(L['hi_day']) ,str(L_ni['hi_day'])],\n                        ['num infected', \"{:,}\".format(L['tot_inf_n']), \"{:,}\".format(L_ni['tot_inf_n'])],\n                        ['per pop inf', str( L['tot_inf_p']), str( L_ni['tot_inf_p']) ], \n                        ['num treated', \"{:,}\".format(L['tot_treats_n']), \"{:,}\".format(L_ni['tot_treats_n'])],\n                        ['per pop trt' , str(L['tot_treats_p']), str(L_ni['tot_treats_p']) ],\n                         ]\n\n                  return (df_B_NI, df_B, data_table1, data_table2, colors1, colors2, hday_ni, hday, y_ni, y_hit)\n            \n        else:  \n             \n              return [vac_start, hday, data_table2, colors2]\n              \n\n\n\n\n\n\n\n\n\n# UI\napp_ui = ui.page_fluid(\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_slider(\"pop_size\", \"Population size\", min=10000, max=1000000,value=500000,step=1000),\n                ui.input_slider(\"inf_start\", \"Infectious start size\", 1, 100, 30),\n                ui.input_slider(\"r0_val\", \"R0\", min=1.1, max=15, value=5,step=0.1),\n                ui.input_slider(\"recov\", \"Recovery period (days)\", 1, 30, 7),\n                ui.input_slider(\"vacc_cov\", \"% Vaccine coverage\", min=0.001, max=0.01, value=0.005,step=0.0001),\n                ui.input_slider(\"vacc_eff\", \"Vaccine efficacy\", 0.5, 1, 0.9),\n                ui.input_slider(\"non_inf\", \"Non-inferiorioty limit\", 0.1, 0.3, 0.1),\n                ui.input_slider(\"vacc_day\", \"Vaccine start day\", 1, 100, 10),\n                ui.input_slider(\"mod_dur\", \"Model duration\", 200, 365, 300)\n            ),\n        ui.panel_main(\n            ui.input_select(\"mod_word\", \"Model type\", {\"law_meth\":\"Law\" ,\"stan_meth\": \"Standard\"}),\n            ui.output_plot(\"plot\",height=\"700px\",width=\"100%\"),\n            ui.markdown(\n        \"\"\"\n        ### Effect of reducing VE by NI limit\n        \"\"\"\n    ),\n        )\n    )\n)\n\n# Server\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A simulation plot\")\n    def plot():\n        N=input.pop_size()\n        I=input.inf_start()\n        R_0=input.r0_val()\n        VE=input.vacc_eff()\n        recov=input.recov()\n        cov=input.vacc_cov()\n        NIlimit=input.non_inf()\n        time_end=input.mod_dur()\n        vac_start=input.vacc_day()\n        model_type_word=input.mod_word()\n        if(model_type_word==\"law_meth\"):\n               model_type=1\n        else:\n               model_type=2\n\n        if (len(f(R_0, recov, N,I, VE,NIlimit,cov,vac_start, time_end,model_type))==4):\n            vac_start, hday, data_table2, colors2=f(R_0, recov, N,I, VE,NIlimit,cov,vac_start, time_end,model_type)\n            vac_start1=str(vac_start)\n            if (hday<=10000):\n                hday1=str(int(np.round(hday)))\n            else:\n                hday1=\"-\"\n            table=[['The vaccination start day of '+vac_start1+ \" is on or after the day of herd immunity \"+hday1]]\n            fig, ax = plt.subplots()#figsize=(10.6,7.5))\n            ax.axis('off')\n            ax.axis('tight')\n            ax.table( \n                cellText=table,\n                cellColours=[['yellow']],\n                cellLoc ='center',  \n                fontsize=16,\n                loc ='upper left'\n                ) \n            ax.set_title(\"Message\", \n                        fontweight =\"bold\")\n            #ax.annotate(alert_message, xy = (4, 4))\n        \n            #fig.tight_layout()\n            return fig\n \n        \n        else:\n            #displaying the whole model tables and graphs\n            df, df1, data_table1, data_table2, colors1, colors2, hday_ni, hday, y_ni, y_hit=f(R_0, recov, N,I, VE,NIlimit,cov,vac_start, time_end,model_type)\n        \n            #df, df1, data_table1, data_table2, colors1, colors2=f(0.3,10,1000000,1,0.95,0.1,0.003,1,200,1)\n            fig, ax = plt.subplots(2, 2)#, figsize=(10.6,10.6))\n        \n            #df is the model that changes with change in NI limit value\n            ax[1,1].set_facecolor('#F8F8F8')\n            ax[1, 1].plot(df['day'], df['infected'], lw=2,color=\"red\",label=\"I\")\n            ax[1, 1].plot(df['day'], df['susceptible'], lw=2,color=\"blue\",label=\"S\")\n            ax[1, 1].plot(df['day'], df['recovered'], lw=2,color=\"green\",label=\"R\")\n            ax[1, 1].plot(df['day'], df['tot_infected'], lw=2,color=\"black\",label=\"Tot I\")\n            ax[1, 1].axhline(y=y_ni,color='cyan', label=\"HI\")\n            ax[1, 1].axvline(x=hday_ni,color='cyan')\n            #printing a custom message when there is no herd immunity \n            if(y_ni>100):\n                ax[1,1].text(50, 80, \" No herd immuinity\", ha=\"center\", va=\"center\", fontsize=10, bbox={\"facecolor\":\"cyan\", \"alpha\":0.9} )\n                ax[1, 1].set_title('NI limit=' + str(round((NIlimit*100), 2))+'% '   +' R0=' + str(round(R_0,2)), loc='right')\n            else:\n                ax[1, 1].set_title('NI limit=' + str(round((NIlimit*100), 2))+'% '   +' R0=' + str(round(R_0,2)))\n            plt.xlim([0, time_end])\n            ax[1,1].set_ylim([0, 100])\n            ax[1,1].set_xlabel('Time, Day')\n            ax[1,1].set_ylabel('Proportion, %', size='large')\n            ax[1, 1].grid()\n            ax[1, 1].legend(loc='upper center', bbox_to_anchor=(0.5, -0.15),\n                    fancybox=True, shadow=True, ncol=5)\n            ax[0, 1].axis('off')\n            ax[0, 1].axis('tight')\n            ax[0, 1].table( \n                cellText=data_table1,\n                cellColours=colors1,\n                cellLoc ='center',  \n                loc ='upper left')\n            ax[0,1].set_title('Comparison', \n                        fontweight =\"bold\")\n            \n        \n            ax[1, 0].plot(df1['day'], df1['infected'], lw=2,color=\"red\",label=\"I\")\n            ax[1, 0].plot(df1['day'], df1['susceptible'], lw=2,color=\"blue\",label=\"S\")\n            ax[1, 0].plot(df1['day'], df1['recovered'], lw=2,color=\"green\",label=\"R\")\n            ax[1, 0].plot(df1['day'], df1['tot_infected'], lw=2,color=\"black\",label=\"Tot I\")\n            ax[1, 0].axhline(y=y_hit,color='cyan', label=\"HI\")\n            #printing a custom message when there is no herd immunity \n            if(y_hit>100):\n                  ax[1,0].text(50, 80, \" No herd immuinity\", ha=\"center\", va=\"center\", fontsize=10, bbox={\"facecolor\":\"cyan\", \"alpha\":0.9} )\n            ax[1, 0].axvline(x=hday,color='cyan')\n            ax[1, 0].set_title('R0=' + str(round(R_0,2)))\n            ax[1,0].set_xlim([0, time_end])\n            ax[1,0].set_ylim([0, 100])\n            ax[1,0].set_xlabel('Time, Day')\n            ax[1,0].set_ylabel('Proportion, %', size='large')\n            ax[1, 0].grid()\n            ax[1,0].legend(loc='upper center', bbox_to_anchor=(0.5, -0.15),\n                    fancybox=True, shadow=True, ncol=5)\n            ax[0, 0].axis('off')\n            ax[0, 0].axis('tight')\n            ax[0, 0].table( \n                cellText=data_table2,\n                cellColours=colors2,\n                cellLoc ='center',  \n                loc ='upper left'\n                ) \n            ax[0,0].set_title('Input Values', \n                        fontweight =\"bold\")\n            #fig.tight_layout()\n            return fig\n        \n        \n        \n \n\n\napp = App(app_ui, server)", "type": "text"}]